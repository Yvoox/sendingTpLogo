
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 16 14:31:24 CEST 2018
//----------------------------------------------------

package hassen.logo.interpreter;

import hassen.logo.ui.GraphicTurtle;
import hassen.logo.interpreter.SymbolTable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 16 14:31:24 CEST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\003\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\004\004\000\002\005\002" +
    "\000\002\005\003\000\002\005\006\000\002\005\004\000" +
    "\002\005\004\000\002\005\003\000\002\005\003\000\002" +
    "\005\005\000\002\005\006\000\002\006\002\000\002\006" +
    "\005\000\002\007\003\000\002\007\003\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\026\002\uffff\004\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\012\uffff\013\uffff\022\uffff\025\uffff\001\002" +
    "\000\004\002\051\001\002\000\026\002\001\004\ufffc\006" +
    "\011\007\015\010\010\011\016\012\014\013\017\022\007" +
    "\025\013\001\002\000\026\002\ufffe\004\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\022\ufffe\025\ufffe" +
    "\001\002\000\010\016\021\024\020\025\023\001\002\000" +
    "\004\004\ufff7\001\002\000\010\016\021\024\020\025\023" +
    "\001\002\000\004\004\042\001\002\000\004\014\040\001" +
    "\002\000\004\004\ufffb\001\002\000\010\016\021\024\020" +
    "\025\023\001\002\000\004\004\ufff6\001\002\000\010\016" +
    "\021\024\020\025\023\001\002\000\040\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\022\ufff1\023\ufff1\025\ufff1" +
    "\001\002\000\010\016\021\024\020\025\023\001\002\000" +
    "\014\005\024\015\027\016\025\017\026\020\030\001\002" +
    "\000\040\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\022\ufff0\023\ufff0\025\ufff0\001\002\000\010\016\021\024" +
    "\020\025\023\001\002\000\010\016\021\024\020\025\023" +
    "\001\002\000\010\016\021\024\020\025\023\001\002\000" +
    "\010\016\021\024\020\025\023\001\002\000\010\016\021" +
    "\024\020\025\023\001\002\000\040\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\022\uffec\023\uffec\025\uffec\001" +
    "\002\000\040\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\026\020" +
    "\030\022\uffef\023\uffef\025\uffef\001\002\000\040\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\022\uffed\023\uffed" +
    "\025\uffed\001\002\000\040\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee" +
    "\017\026\020\030\022\uffee\023\uffee\025\uffee\001\002\000" +
    "\014\004\ufffa\015\027\016\025\017\026\020\030\001\002" +
    "\000\040\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\022\uffeb\023\uffeb\025\uffeb\001\002\000\014\004\ufff8\015" +
    "\027\016\025\017\026\020\030\001\002\000\010\016\021" +
    "\024\020\025\023\001\002\000\014\004\ufff5\015\027\016" +
    "\025\017\026\020\030\001\002\000\026\002\ufffd\004\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\022" +
    "\ufffd\025\ufffd\001\002\000\014\004\ufff9\015\027\016\025" +
    "\017\026\020\030\001\002\000\036\004\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\027\016\025" +
    "\017\026\020\030\022\ufff3\023\ufff3\025\ufff3\001\002\000" +
    "\026\004\ufffc\006\011\007\015\010\010\011\016\012\014" +
    "\013\017\022\007\023\047\025\013\001\002\000\004\004" +
    "\050\001\002\000\004\004\ufff4\001\002\000\026\004\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\022" +
    "\ufff2\023\ufff2\025\ufff2\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\005\005\011\001\001\000\002\001\001" +
    "\000\004\007\043\001\001\000\002\001\001\000\004\007" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\036\001\001\000\002\001\001\000" +
    "\004\007\021\001\001\000\002\001\001\000\004\007\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\034\001\001\000\004\007\033\001\001\000\004\007\032" +
    "\001\001\000\004\007\031\001\001\000\004\007\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\044\001" +
    "\001\000\004\005\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP_actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP_actions();
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP_do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    
    private GraphicTurtle turtle;
    private SymbolTable table = null;

    public SymbolTable getTable () {
		if (table == null) table = new SymbolTable ();
		return table;
    }

    public GraphicTurtle getTurtle () {
		return turtle;
    }

    public void setTurtle (GraphicTurtle turtle) {
		this.turtle = turtle;
    }



/** Cup generated class to encapsulate user supplied action code.*/
class CUP_actions {

  /** Constructor */

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP_do_action(
    int                        CUP_act_num,
    java_cup.runtime.lr_parser CUP_parser,
    java.util.Stack            CUP_stack,
    int                        CUP_top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP_result;

      /* select the action based on the action number */
      switch (CUP_act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expression ::= SUB Expression 
            {
              Integer RESULT =null;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = -v; 
              CUP_result = getSymbolFactory().newSymbol("Expression",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= Expression DIV Expression 
            {
              Integer RESULT =null;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = l/r; 
              CUP_result = getSymbolFactory().newSymbol("Expression",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= Expression MULT Expression 
            {
              Integer RESULT =null;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = l*r; 
              CUP_result = getSymbolFactory().newSymbol("Expression",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= Expression SUB Expression 
            {
              Integer RESULT =null;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = l-r; 
              CUP_result = getSymbolFactory().newSymbol("Expression",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expression ::= Expression ADD Expression 
            {
              Integer RESULT =null;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = l+r; 
              CUP_result = getSymbolFactory().newSymbol("Expression",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expression ::= VARIABLE 
            {
              Integer RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = getTable().getValue(n); 
              CUP_result = getSymbolFactory().newSymbol("Expression",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expression ::= INTEGER 
            {
              Integer RESULT =null;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = v; 
              CUP_result = getSymbolFactory().newSymbol("Expression",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instructions ::= Instructions Instruction TERM 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Instructions",4, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instructions ::= 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Instructions",4, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruction ::= REPEAT Expression Instructions END 
            {
              Object RESULT =null;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;

              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instruction ::= VARIABLE EQUAL Expression 
            {
              Object RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 getTable().setValue(n,v); 
              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instruction ::= OFF 
            {
              Object RESULT =null;
		 getTurtle().penUp(); 
              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruction ::= ON 
            {
              Object RESULT =null;
		 getTurtle().penDown(); 
              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruction ::= TURN Expression 
            {
              Object RESULT =null;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 getTurtle().turn(v); 
              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruction ::= MOVE Expression 
            {
              Object RESULT =null;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 getTurtle().move(v); 
              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instruction ::= GOTO Expression COMA Expression 
            {
              Object RESULT =null;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 getTurtle().go(x,y); 
              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruction ::= HOME 
            {
              Object RESULT =null;
		 getTurtle().home(); 
              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instruction ::= 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Definition ::= Instruction TERM 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Definition",2, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Definitions ::= Definitions Definition 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Definitions",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Definitions ::= 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Definitions",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Commandes EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		RESULT = start_val;
              CUP_result = getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP_parser.done_parsing();
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Commandes ::= Definitions 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Commandes",0, RESULT);
            }
          return CUP_result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
